package ${package.Controller};

import org.springframework.web.bind.annotation.RequestMapping;
    #if(${restControllerStyle})
    import org.springframework.web.bind.annotation.RestController;
    #else
    import org.springframework.stereotype.Controller;
    #end
    #if(${superControllerClassPackage})
    import ${superControllerClassPackage};
    #end
    #if(${springdoc})
    import io.swagger.v3.oas.annotations.media.Schema;
    #elseif(${swagger})
    import io.swagger.annotations.Api;
    import io.swagger.annotations.ApiOperation;
    import io.swagger.annotations.ApiParam;
    #end
import java.util.Collections;
import java.util.List;

import com.weikbest.pro.${projectName}.common.annotation.log.QueryLog;
import com.weikbest.pro.${projectName}.common.annotation.log.RemoveLog;
import com.weikbest.pro.${projectName}.common.annotation.log.SaveLog;
import com.weikbest.pro.${projectName}.common.annotation.log.UpdateLog;
import com.weikbest.pro.${projectName}.common.annotation.token.UseToken;
import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
import ${package.Parent}.${packageQO}.${entity}QO;
import ${package.Parent}.${packageDTO}.${entity}DTO;
import cn.hutool.core.util.ObjectUtil;
import lombok.extern.slf4j.Slf4j;

import javax.annotation.Resource;

import org.springframework.web.bind.annotation.*;
import com.weikbest.pro.${projectName}.common.transfervo.resp.DataResp;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.weikbest.pro.${projectName}.common.transfervo.req.base.PageReq;
import com.weikbest.pro.${projectName}.common.transfervo.resp.PageResp;
import javax.validation.Valid;

import com.weikbest.pro.${projectName}.common.util.JsrCheckUtil;
import org.springframework.validation.BindingResult;
import com.weikbest.pro.${projectName}.common.transfervo.resp.ResultConstant;

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
    #if(${swagger})
    @Api(tags = {"$!{package.ModuleName}::$!{table.comment}接口"})
    #end
    #if(${restControllerStyle})
    @RestController
    #else
    @Controller
    #end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
    #if(${superControllerClass})
    public class ${table.controllerName} extends ${superControllerClass} {
    #else
    public class ${table.controllerName} {
    #end

    #set( $lowerCaseEntity = $entity.substring(0,1).toLowerCase() + $entity.substring(1) )
@Resource
private ${entity}Service ${lowerCaseEntity}Service;

@UseToken
@SaveLog(value = "新增$!{table.comment}数据")
@ApiOperation(value = "新增数据")
@PostMapping("/insert")
public DataResp<Boolean> insert(
@ApiParam(name = "${lowerCaseEntity}DTO", value = "保存数据信息", required = true)
@Valid ${entity}DTO ${lowerCaseEntity}DTO,BindingResult bindingResult){

        JsrCheckUtil.valid(bindingResult);

        boolean save= ${lowerCaseEntity}Service.insert(${lowerCaseEntity}DTO);
        return DataResp.ok(save);
        }

@UseToken
@UpdateLog(value = "更新$!{table.comment}数据")
@ApiOperation(value = "更新数据")
@PutMapping("/update/{id}")
public DataResp<Boolean> update(
@ApiParam(name = "id", value = "ID", required = true)
@PathVariable Long id,
@ApiParam(name = "${lowerCaseEntity}DTO", value = "更新数据信息", required = true)
@Valid ${entity}DTO ${lowerCaseEntity}DTO,BindingResult bindingResult){

        JsrCheckUtil.valid(bindingResult);

        boolean update= ${lowerCaseEntity}Service.updateById(id, ${lowerCaseEntity}DTO);
        return DataResp.ok(update);
        }

@UseToken
@RemoveLog(value = "根据ID删除$!{table.comment}数据")
@ApiOperation(value = "根据ID删除")
@DeleteMapping("/delete/{id}")
public DataResp<Object> delete(
@ApiParam(name = "id", value = "ID", required = true)
@PathVariable Long id){

    ${lowerCaseEntity}Service.deleteBatchByIds(Collections.singletonList(id));
        return DataResp.ok();
        }

@UseToken
@RemoveLog(value = "根据ID列表删除$!{table.comment}数据")
@ApiOperation(value = "根据ID列表删除")
@DeleteMapping("/delete")
public DataResp<Object> delete(
@ApiParam(name = "ids", value = "ID列表", required = true)
@RequestBody List<Long> ids){

    ${lowerCaseEntity}Service.deleteBatchByIds(ids);
        return DataResp.ok();
        }

@UseToken
@QueryLog(value = "根据ID查询$!{table.comment}数据")
@ApiOperation(value = "根据ID查询")
@GetMapping("/find/{id}")
public DataResp<${entity}> find(
@ApiParam(name = "id", value = "ID", required = true)
@PathVariable Long id){

    ${entity} ${lowerCaseEntity} = ${lowerCaseEntity}Service.findById(id);
        return DataResp.ok(${lowerCaseEntity});
        }

@UseToken
@QueryLog(value = "分页查询$!{table.comment}数据")
@ApiOperation(value = "分页查询")
@GetMapping("/queryPage")
public DataResp<List<${entity}>>queryPage(
@ApiParam(name = "${lowerCaseEntity}QO", value = "查询条件")
    ${entity}QO ${lowerCaseEntity}QO,
@ApiParam(name = "pageReq", value = "分页参数", required = true)
        PageReq pageReq){

                IPage<${entity}> pageModel= ${lowerCaseEntity}Service.queryPage(${lowerCaseEntity}QO,pageReq);
        return PageResp.ok(pageModel.getTotal(),pageModel.getRecords());
        }
        }
#end
